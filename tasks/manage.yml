---
## Dealing with packages
## It should be better to install sudo only if ther is a sudoers group
- name: install sudo
  apt: 
    name: sudo
    state: present

## Dealing with groups

- name: ver os_groups
  debug: 
    var: os_groups
    verbosity: 3

- name: Adding groups declared in groups
  group:
    name: "{{ item.name }}"
    state: present
  with_items: "{{ os_groups }}"
  when: os_groups is defined and os_groups 

# We could automatically crete groups defined for users, but no in groups
## would be better here just check for consistency between groups[*].name and users[*].groups[*] 
#- name: Adding group user's belong to
#    name: "{{ item }}" 
#  with_items: "{{ users | json_query('[*].groups[*]') | flatten | sort | unique }}"

- name: Adding primary group
  group:
    name: "{{ users_group }}"
    state: present
  when: users_group is defined and users_group

- name: Adding secondary groups
  group:
    name: "{{ item.name }}"
    gid:  "{{ item.gid | default( '' ) }}"
    system:  "{{ item.system | default( no ) }}"
    state: present
  with_items: "{{ users_groups | default([]) }}"
  
- name: ver users
  debug: 
    var: users
    verbosity: 3

- name: Adding users
  user:
    name: "{{ item.username }}"
    uid: "{{ item.uid | default(omit) }}"
    home: "{{ item.home | default(users_home ~ '/' ~ item.username ) }}"
    comment: "{{ item.name | default(omit) }}"
    system: "{{ item.system | default(omit) }}"
    generate_ssh_key: "{{ item.ssh_key_generate | default(omit) }}"
    group: "{{ omit if item.group is defined and item.group == item.username else (item.group if item.group is defined else (users_group if users_group else omit)) }}"
    groups: "{{ item.groups|join(',') if item.groups is defined else users_groups|join(',')}}"
    append: "{{ item.append | default(omit) }}"
    password: "{{ item.password | default(omit) }}"
    ssh_key_file: ".ssh/id_{{ item.ssh_key_type | default(users_ssh_key_type) }}"
    ssh_key_passphrase: "{{ item.ssh_key_password | default(omit) }}"
    ssh_key_bits: "{{ item.ssh_key_bits | default(users_ssh_key_bits) }}"
    createhome: "{{ item.home_create | default(omit) }}"
    shell: "{{ item.shell | default(default_shell) }}"
    update_password: "{{ item.update_password | default(omit) }}"
  with_items: "{{ users }}"

- name: Setting user's home permission
  file:
    dest: "{{ item.home | default(users_home ~ '/' ~ item.username) }}"
    owner: "{{ item.username }}"
    group: "{{ item.group if item.group is defined else (users_group if users_group else item.username) }}"
    mode: "{{ item.home_mode if item.home_mode is defined else users_home_mode }}"
  when: item.home_create is not defined or item.home_create
  with_items: "{{ users }}"

- name: Adding user's .ssh directory
  file:
    path: "{{ item.home | default(users_home ~ '/' ~ item.username) }}/.ssh"
    owner: "{{ item.username }}"
    group: "{{ item.group if item.group is defined else (users_group if users_group else item.username) }}"
    state: directory
    mode: '0700'
  when: item.home_create is not defined or item.home_create
  with_items: "{{ users }}"

- name: Adding user's private key
  template:
    src: home/user/ssh/private-key.j2
    dest: "{{ item.home | default(users_home ~ '/' ~ item.username) }}/.ssh/id_{{ item.ssh_key_type | default('rsa') }}"
    owner: "{{ item.username }}"
    group: "{{ item.group if item.group is defined else (users_group if users_group else item.username) }}"
    mode: '0600'
  when: (item.home_create is not defined or item.home_create) and item.ssh_key is defined
  with_items: "{{ users }}"

- name: Adding user's authorized keys
  authorized_key:
    key: "{{ item.authorized_keys | default([]) | join('\n') }}"
    user: "{{ item.username }}"
    exclusive: "{{ item.authorized_keys_exclusive | default(users_authorized_keys_exclusive) }}"
  when: item.home_create is not defined or item.home_create
  with_items: "{{ users }}"

- name: Adding user's home files
  copy:
    src: "{{ item.1 }}"
    dest: "{{ item.0.home | default(users_home ~ '/' ~ item.0.username) }}/{{ item.1 | basename }}"
    owner: "{{ item.0.username }}"
    group: "{{ item.0.group if item.0.group is defined else (users_group if users_group else item.0.username) }}"
  with_subelements:
    - "{{ users }}"
    - home_files
    - skip_missing: yes

## Would be better to implement a strict / lazy set of users and membership. Â¿Should I remove what is not defined in variables to be idempotent?
- name: Removing users
  user:
    name: "{{ item }}"
    state: absent
    remove: yes
  with_items: "{{ users_remove }}"

## Dealing with groups' membership

- name: groups' loop to add declared members to groups
  include_tasks: add_group_members.yml
  loop: "{{ os_groups }}"
  loop_control:
    loop_var: current_group
  when: os_groups is defined

## Dealing with groups' sudo authorizations

- name: groups with sudo access without password
  template: 
    src: etc/sudoers.d/without-password.j2
    dest: /etc/sudoers.d/{{item.name}}
    owner: root
    group: root
    mode: 0440
  with_items: "{{ os_groups }}"
  when: (item.sudoers is defined) and (item.sudoers == 'without-password')

- name: groups with sudo access with password
  template: 
    src: etc/sudoers.d/with-password.j2
    dest: /etc/sudoers.d/{{item.name}}
    owner: root
    group: root
    mode: 0440
  with_items: "{{ os_groups }}"
  when:  (item.sudoers is defined) and (item.sudoers == 'with-password')