---
## Dealing with packages
## It should be better to install sudo only if ther is a sudoers group
- name: install sudo
  apt: 
    name: sudo
    state: present
    update_cache: yes

## Dealing with groups

- name: ver os_groups
  debug: 
    var: os_groups
    verbosity: 1

- name: Adding groups declared in os_groups
  group:
    name: "{{ os_group.name }}"
    gid: "{{ os_group.gid | default ( omit ) }}"
    system: "{{ os_group.system | default ( 'no' ) }}"
    state: present
  loop: "{{ os_groups }}"
  loop_control:
    loop_var: os_group
  when: os_groups is defined and os_groups 

# We could automatically create groups defined for users, but no in groups
## would be better here just check for consistency between groups[*].name and users[*].groups[*] 
#- name: Adding group user's belong to
#    name: "{{ item }}" 
#  with_items: "{{ users | json_query('[*].groups[*]') | flatten | sort | unique }}"

- name: Adding primary group
  group:
    name: "{{ users_group }}"
    state: present
  when: users_group is defined and users_group

- name: Adding secondary groups
  group:
    name: "{{ os_group.name }}"
    gid: "{{ os_group.gid | default ( omit ) }}"
    system: "{{ os_group.system | default ( 'no' ) }}"
    state: present
  loop: "{{ users_groups | default([]) }}"
  loop_control:
    loop_var: os_group
  
- name: ver users
  debug: 
    var: users
    verbosity: 1

- name: Adding users
  user:
    name: "{{ user.username }}"
    uid: "{{ user.uid | default(omit) }}"
    home: "{{ user.home | default(users_home ~ '/' ~ user.username ) }}"
    comment: "{{ user.name | default(omit) }}"
    system: "{{ user.system | default(omit) }}"
    generate_ssh_key: "{{ user.ssh_key_generate | default(omit) }}"
    group: "{{ omit if user.group is defined and user.group == item.username else (user.group if user.group is defined else (users_group if users_group else omit)) }}"
    groups: "{{ user.groups|join(',') if user.groups is defined else users_groups|join(',')}}"
    append: "{{ user.append | default(omit) }}"
    password: "{{ user.password | password_hash( 'sha512', user.pwd_salt | default ( users_pwd_salt ) ) if user.password is defined else omit }}"
    ssh_key_file: ".ssh/id_{{ user.ssh_key_type | default(users_ssh_key_type) }}"
    ssh_key_passphrase: "{{ user.ssh_key_password | default(omit) }}"
    ssh_key_bits: "{{ user.ssh_key_bits | default(users_ssh_key_bits) }}"
    createhome: "{{ user.home_create | default(omit) }}"
    shell: "{{ user.shell | default(default_shell) }}"
    update_password: "{{ 'always' if users_force_passwords else user.update_password | default('on_create') }}"
  loop: "{{ users }}"
  loop_control:
    loop_var: user
  register: users_creation

- name: Setting user's home permission
  file:
    dest: "{{ user.home | default(users_home ~ '/' ~ user.username) }}"
    owner: "{{ user.username }}"
    group: "{{ user.group if user.group is defined else (users_group if users_group else user.username) }}"
    mode: "{{ user.home_mode if user.home_mode is defined else users_home_mode }}"
  when: user.home_create is not defined or user.home_create
  loop: "{{ users }}"
  loop_control:
    loop_var: user

- name: Copy password to user's account
  template:
    src: home/user/password.txt.j2
    dest: "{{ result.user.home | default(users_home ~ '/' ~ result.user.username) }}/{{ users_password_file }}"
    owner: "{{ result.user.username }}"
    group: "{{ result.user.group if result.user.group is defined else (users_group if users_group else result.user.username) }}"
    mode: '0600'
  when: result.changed and result.user.password is defined and result.user.password != ''
  loop: "{{ users_creation.results }}"
  loop_control:
    loop_var: result

- name: Adding user's .ssh directory
  file:
    path: "{{ user.home | default(users_home ~ '/' ~ user.username) }}/.ssh"
    owner: "{{ user.username }}"
    group: "{{ user.group if item.group is defined else (users_group if users_group else user.username) }}"
    state: directory
    mode: '0700'
  when: user.home_create is not defined or user.home_create
  loop: "{{ users }}"
  loop_control:
    loop_var: user

- name: Adding user's private key
  template:
    src: home/user/ssh/private-key.j2
    dest: "{{ user.home | default(users_home ~ '/' ~ user.username) }}/.ssh/id_{{ user.ssh_key_type | default('rsa') }}"
    owner: "{{ user.username }}"
    group: "{{ user.group if user.group is defined else (users_group if users_group else user.username) }}"
    mode: '0600'
  when: (user.home_create is not defined or user.home_create) and item.ssh_key is defined
  loop: "{{ users }}"
  loop_control:
    loop_var: user

- name: Adding user's authorized keys
  authorized_key:
    key: "{{ user.authorized_keys | default([]) | join('\n') }}"
    user: "{{ user.username }}"
    exclusive: "{{ user.authorized_keys_exclusive | default(users_authorized_keys_exclusive) }}"
  when: user.home_create is not defined or user.home_create
  loop: "{{ users }}"
  loop_control:
    loop_var: user

- name: Adding user's home files
  copy:
    src: "{{ item.1 }}"
    dest: "{{ item.0.home | default(users_home ~ '/' ~ item.0.username) }}/{{ item.1 | basename }}"
    owner: "{{ item.0.username }}"
    group: "{{ item.0.group if item.0.group is defined else (users_group if users_group else item.0.username) }}"
  with_subelements:
    - "{{ users }}"
    - home_files
    - skip_missing: yes

## Would be better to implement a strict / lazy set of users and membership. Â¿Should I remove what is not defined in variables to be idempotent?
- name: Removing users
  user:
    name: "{{ user }}"
    state: absent
    remove: yes
  loop: "{{ users }}"
  loop_control:
    loop_var: user

## Dealing with groups' membership

- name: groups' loop to add declared members to groups
  include_tasks: add_group_members.yml
  loop: "{{ os_groups }}"
  loop_control:
    loop_var: os_group
  when: os_groups is defined

## Dealing with groups' sudo authorizations

- name: groups with sudo access without password
  template: 
    src: etc/sudoers.d/without-password.j2
    dest: /etc/sudoers.d/{{ os_group.name }}
    owner: root
    group: root
    mode: 0440
  when: ( os_group.sudoers is defined ) and ( os_group.sudoers == 'without-password' )
  loop: "{{ os_groups | default( [] ) }}"
  loop_control:
    loop_var: os_group

- name: groups with sudo access with password
  template: 
    src: etc/sudoers.d/with-password.j2
    dest: /etc/sudoers.d/{{ os_group.name }}
    owner: root
    group: root
    mode: 0440
  when:  ( os_group.sudoers is defined ) and ( os_group.sudoers == 'with-password' )
  loop: "{{ os_groups | default( [] ) }}"
  loop_control:
    loop_var: os_group

...
